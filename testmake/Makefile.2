# Intermediate Makefile Example

# compiler macro: g++ for C++
CC = g++

# compiler flags:
CFLAGS  = -std=c++11

# define any directories containing header files other than /usr/include:
INCLUDES = -I../include

# define library paths in addition to /usr/lib:
LFLAGS = -L../lib

# define any libraries to link into executable:
# For (libx.so or libx.a) use the -lx
# For (liby.so or liby.a) in ../lib use -ly
#LIBS = -lx -ly

# define the C++ source files:
SRCS = main.cpp include.cpp

# define the C object files:
# Using Suffix Replacement within a macro $(name:string1=string2)
OBJS = $(SRCS:.cpp=.o)

# the build target executable:
TARGET = main

# If files named 'depend' and 'clean' exist, don't confuse with them
# and go ahead to execution
.PHONY: depend clean

# The default execution for 'make'
all: $(TARGET)
	@echo Simple compiler named mycc has been compiled

# compiles the files to generate the executable defined by TARGET
$(TARGET): $(OBJS)
	$(CC) $(CFLAGS) $(INCLUDES) -o $(TARGET) $(OBJS) $(LFLAGS) $(LIBS)

# this is a suffix replacement rule for building .o's from .c's
# '$<' the name of the prerequisite of the rule(a .cpp file) and
# '$@' the name of the target of the rule (a .o file)
.c.o:
	$(CC) $(CFLAGS) $(INCLUDES) -c $<  -o $@

clean:
	$(RM) *.o *~ $(TARGET)

depend: $(SRCS)
	makedepend $(INCLUDES) $^

# DO NOT DELETE THIS LINE -- make depend needs it
